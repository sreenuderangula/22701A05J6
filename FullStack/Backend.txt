import json
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlparse, parse_qs
from datetime import datetime, timedelta
import random
import string

PORT = 4000

# In-memory storage
url_db = {}

# Function to generate random shortcode
def generate_shortcode(length=6):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# HTTP request handler
class SimpleHandler(BaseHTTPRequestHandler):
    def _set_headers(self, status=200):
        self.send_response(status)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')  # allow HTML to access
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def do_OPTIONS(self):
        self._set_headers()

    def do_POST(self):
        if self.path == '/shorturls':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data)

            url = data.get('url')
            validity = int(data.get('validity', 60))
            shortcode = data.get('shortcode') or generate_shortcode()

            expiry_time = datetime.now() + timedelta(minutes=validity)
            url_db[shortcode] = {'url': url, 'expiry': expiry_time}

            shortlink = f"http://localhost:{PORT}/{shortcode}"

            self._set_headers()
            self.wfile.write(json.dumps({
                'shortlink': shortlink,
                'expiry': expiry_time.strftime("%Y-%m-%d %H:%M:%S")
            }).encode('utf-8'))

    def do_GET(self):
        # Redirect short URL
        code = self.path[1:]  # remove leading /
        if code in url_db:
            entry = url_db[code]
            if datetime.now() > entry['expiry']:
                self.send_response(410)
                self.end_headers()
                self.wfile.write(b'Short URL expired')
            else:
                self.send_response(302)
                self.send_header('Location', entry['url'])
                self.end_headers()
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'Short URL not found')

if __name__ == '__main__':
    print(f"Server running at http://localhost:{PORT}")
    server = HTTPServer(('', PORT), SimpleHandler)
    server.serve_forever()